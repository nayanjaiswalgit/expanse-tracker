import { FormConfig } from '../../../shared/schemas';
import {
  invoiceGeneratorSchema,
  pdfProcessorSchema,
  receiptScannerSchema,
  ollamaManagementSchema,
  aiSettingsSchema,
  InvoiceGeneratorFormData,
  PdfProcessorFormData,
  ReceiptScannerFormData,
  OllamaManagementFormData,
  AiSettingsFormData
} from '../schemas';

export const createInvoiceGeneratorFormConfig = (
  onSubmit: (data: InvoiceGeneratorFormData) => Promise<void>,
  isLoading?: boolean,
  initialData?: Partial<InvoiceGeneratorFormData>
): FormConfig<InvoiceGeneratorFormData> => ({
  schema: invoiceGeneratorSchema,
  title: 'Generate Invoice',
  description: 'Create professional invoices with AI assistance.',
  fields: [
    {
      name: 'client_name',
      type: 'input',
      label: 'Client Name',
      placeholder: 'Client or Company Name',
      validation: { required: true },
    },
    {
      name: 'client_email',
      type: 'email',
      label: 'Client Email',
      placeholder: 'client@example.com',
      description: 'Optional: Email address for sending the invoice',
    },
    {
      name: 'client_address',
      type: 'textarea',
      label: 'Client Address',
      placeholder: 'Client billing address...',
      rows: 3,
    },
    {
      name: 'invoice_number',
      type: 'input',
      label: 'Invoice Number',
      placeholder: 'INV-001',
      validation: { required: true },
    },
    {
      name: 'invoice_date',
      type: 'date',
      label: 'Invoice Date',
      validation: { required: true },
    },
    {
      name: 'due_date',
      type: 'date',
      label: 'Due Date',
      validation: { required: true },
    },
    {
      name: 'currency',
      type: 'select',
      label: 'Currency',
      options: [
        { value: 'USD', label: 'USD - US Dollar' },
        { value: 'EUR', label: 'EUR - Euro' },
        { value: 'GBP', label: 'GBP - British Pound' },
        { value: 'CAD', label: 'CAD - Canadian Dollar' },
      ],
      validation: { required: true },
    },
    {
      name: 'tax_rate',
      type: 'number',
      label: 'Tax Rate (%)',
      placeholder: '10',
      min: 0,
      max: 100,
      description: 'Tax percentage to apply to invoice total',
    },
    {
      name: 'notes',
      type: 'textarea',
      label: 'Notes',
      placeholder: 'Payment terms, additional information...',
      rows: 3,
    },
  ],
  layout: 'vertical',
  submission: {
    onSubmit,
    submitText: 'Generate Invoice',
    loading: isLoading,
  },
  defaultValues: {
    client_name: '',
    client_email: '',
    client_address: '',
    invoice_number: '',
    invoice_date: new Date().toISOString().split('T')[0],
    due_date: '',
    currency: 'USD',
    tax_rate: '0',
    notes: '',
    items: [
      {
        description: '',
        quantity: 1,
        unit_price: 0,
      }
    ],
    ...initialData,
  },
});

export const createPdfProcessorFormConfig = (
  onSubmit: (data: PdfProcessorFormData) => Promise<void>,
  isLoading?: boolean
): FormConfig<PdfProcessorFormData> => ({
  schema: pdfProcessorSchema,
  title: 'Process PDF Document',
  description: 'Extract data from PDF files using AI-powered processing.',
  fields: [
    {
      name: 'file',
      type: 'file',
      label: 'PDF File',
      accept: '.pdf',
      validation: { required: true },
      description: 'Select a PDF file to process (max 10MB)',
    },
    {
      name: 'extract_text',
      type: 'checkbox',
      label: 'Extract Text',
      description: 'Extract all text content from the PDF',
    },
    {
      name: 'extract_tables',
      type: 'checkbox',
      label: 'Extract Tables',
      description: 'Identify and extract table data',
    },
    {
      name: 'extract_images',
      type: 'checkbox',
      label: 'Extract Images',
      description: 'Extract embedded images from the PDF',
    },
    {
      name: 'ocr_enabled',
      type: 'checkbox',
      label: 'Enable OCR',
      description: 'Use OCR for scanned documents and images',
    },
    {
      name: 'language',
      type: 'select',
      label: 'Document Language',
      options: [
        { value: 'en', label: 'English' },
        { value: 'es', label: 'Spanish' },
        { value: 'fr', label: 'French' },
        { value: 'de', label: 'German' },
        { value: 'it', label: 'Italian' },
        { value: 'pt', label: 'Portuguese' },
        { value: 'zh', label: 'Chinese' },
        { value: 'ja', label: 'Japanese' },
      ],
      validation: { required: true },
      description: 'Primary language of the document for better OCR accuracy',
    },
    {
      name: 'password',
      type: 'password',
      label: 'PDF Password',
      placeholder: 'Enter password if PDF is protected',
      description: 'Only required for password-protected PDFs',
    },
  ],
  layout: 'vertical',
  submission: {
    onSubmit,
    submitText: 'Process PDF',
    loading: isLoading,
  },
  defaultValues: {
    extract_text: true,
    extract_tables: true,
    extract_images: false,
    ocr_enabled: true,
    language: 'en',
    password: '',
  },
});

export const createReceiptScannerFormConfig = (
  onSubmit: (data: ReceiptScannerFormData) => Promise<void>,
  accounts: Array<{ value: number; label: string }>,
  categories: Array<{ value: number; label: string }>,
  isLoading?: boolean
): FormConfig<ReceiptScannerFormData> => ({
  schema: receiptScannerSchema,
  title: 'Scan Receipt',
  description: 'Automatically extract transaction data from receipt images.',
  fields: [
    {
      name: 'image',
      type: 'file',
      label: 'Receipt Image',
      accept: 'image/*',
      validation: { required: true },
      description: 'Take a photo or upload an image of your receipt (max 5MB)',
    },
    {
      name: 'account_id',
      type: 'select',
      label: 'Account',
      options: accounts,
      validation: { required: true },
      description: 'Which account was used for this purchase?',
    },
    {
      name: 'category_id',
      type: 'select',
      label: 'Category',
      options: [{ value: 0, label: 'Auto-detect' }, ...categories],
      description: 'Leave as "Auto-detect" to automatically categorize',
    },
    {
      name: 'auto_categorize',
      type: 'checkbox',
      label: 'Auto-categorize',
      description: 'Automatically determine the best category for this transaction',
    },
    {
      name: 'extract_merchant',
      type: 'checkbox',
      label: 'Extract Merchant Info',
      description: 'Extract merchant name and details from receipt',
    },
    {
      name: 'extract_items',
      type: 'checkbox',
      label: 'Extract Line Items',
      description: 'Extract individual items and prices',
    },
    {
      name: 'confidence_threshold',
      type: 'number',
      label: 'Confidence Threshold',
      placeholder: '0.8',
      min: 0.1,
      max: 1.0,
      step: 0.1,
      description: 'Minimum confidence level for auto-processing (0.1 = low, 1.0 = high)',
    },
  ],
  layout: 'vertical',
  submission: {
    onSubmit,
    submitText: 'Scan Receipt',
    loading: isLoading,
  },
  defaultValues: {
    account_id: 0,
    category_id: 0,
    auto_categorize: true,
    extract_merchant: true,
    extract_items: false,
    confidence_threshold: 0.8,
  },
});

export const createOllamaManagementFormConfig = (
  onSubmit: (data: OllamaManagementFormData) => Promise<void>,
  isLoading?: boolean,
  initialData?: Partial<OllamaManagementFormData>
): FormConfig<OllamaManagementFormData> => ({
  schema: ollamaManagementSchema,
  title: 'Ollama Model Configuration',
  description: 'Configure local AI models with Ollama.',
  fields: [
    {
      name: 'model_name',
      type: 'input',
      label: 'Model Name',
      placeholder: 'llama2, mistral, codellama',
      validation: { required: true },
      description: 'Name of the Ollama model to use',
    },
    {
      name: 'model_tag',
      type: 'input',
      label: 'Model Tag',
      placeholder: 'latest, 7b, 13b',
      description: 'Specific version/tag of the model (optional)',
    },
    {
      name: 'temperature',
      type: 'number',
      label: 'Temperature',
      placeholder: '0.7',
      min: 0,
      max: 2,
      step: 0.1,
      validation: { required: true },
      description: 'Controls randomness (0 = deterministic, 2 = very random)',
    },
    {
      name: 'max_tokens',
      type: 'number',
      label: 'Max Tokens',
      placeholder: '2048',
      min: 1,
      max: 4096,
      validation: { required: true },
      description: 'Maximum number of tokens to generate',
    },
    {
      name: 'system_prompt',
      type: 'textarea',
      label: 'System Prompt',
      placeholder: 'You are a helpful financial assistant...',
      rows: 4,
      description: 'Instructions for the AI model behavior',
    },
    {
      name: 'enable_streaming',
      type: 'checkbox',
      label: 'Enable Streaming',
      description: 'Stream responses as they are generated',
    },
    {
      name: 'enable_gpu',
      type: 'checkbox',
      label: 'Enable GPU Acceleration',
      description: 'Use GPU for faster processing (if available)',
    },
  ],
  layout: 'vertical',
  submission: {
    onSubmit,
    submitText: 'Save Configuration',
    loading: isLoading,
  },
  defaultValues: {
    model_name: '',
    model_tag: 'latest',
    temperature: 0.7,
    max_tokens: 2048,
    system_prompt: 'You are a helpful financial assistant that helps users manage their finances responsibly.',
    enable_streaming: true,
    enable_gpu: false,
    ...initialData,
  },
});

export const createAiSettingsFormConfig = (
  onSubmit: (data: AiSettingsFormData) => Promise<void>,
  isLoading?: boolean,
  initialData?: Partial<AiSettingsFormData>
): FormConfig<AiSettingsFormData> => ({
  schema: aiSettingsSchema,
  title: 'AI Settings',
  description: 'Configure AI providers and features for enhanced financial management.',
  fields: [
    {
      name: 'provider',
      type: 'select',
      label: 'AI Provider',
      options: [
        { value: 'openai', label: 'OpenAI' },
        { value: 'ollama', label: 'Ollama (Local)' },
        { value: 'claude', label: 'Anthropic Claude' },
        { value: 'local', label: 'Local Model' },
      ],
      validation: { required: true },
    },
    {
      name: 'api_key',
      type: 'password',
      label: 'API Key',
      placeholder: 'Enter your API key',
      conditional: {
        field: 'provider',
        operator: 'not_equals',
        value: 'local',
      },
      description: 'API key for your chosen provider',
    },
    {
      name: 'base_url',
      type: 'input',
      label: 'Base URL',
      placeholder: 'https://api.provider.com',
      conditional: {
        field: 'provider',
        operator: 'equals',
        value: 'local',
      },
      description: 'Custom API endpoint URL',
    },
    {
      name: 'model',
      type: 'select',
      label: 'Model',
      options: [
        { value: 'gpt-4', label: 'GPT-4' },
        { value: 'gpt-3.5-turbo', label: 'GPT-3.5 Turbo' },
        { value: 'claude-3-sonnet', label: 'Claude 3 Sonnet' },
        { value: 'llama2', label: 'Llama 2' },
      ],
      validation: { required: true },
    },
    {
      name: 'max_tokens',
      type: 'number',
      label: 'Max Tokens',
      placeholder: '2048',
      min: 1,
      max: 8192,
      validation: { required: true },
    },
    {
      name: 'temperature',
      type: 'number',
      label: 'Temperature',
      placeholder: '0.7',
      min: 0,
      max: 2,
      step: 0.1,
      validation: { required: true },
    },
    {
      name: 'enable_function_calling',
      type: 'checkbox',
      label: 'Enable Function Calling',
      description: 'Allow AI to call functions and tools',
    },
    {
      name: 'enable_vision',
      type: 'checkbox',
      label: 'Enable Vision',
      description: 'Process images and visual content',
    },
    {
      name: 'auto_categorization',
      type: 'checkbox',
      label: 'Auto-categorization',
      description: 'Automatically categorize transactions',
    },
    {
      name: 'receipt_scanning',
      type: 'checkbox',
      label: 'Receipt Scanning',
      description: 'Extract data from receipt images',
    },
    {
      name: 'invoice_generation',
      type: 'checkbox',
      label: 'Invoice Generation',
      description: 'AI-assisted invoice creation',
    },
    {
      name: 'financial_insights',
      type: 'checkbox',
      label: 'Financial Insights',
      description: 'Generate AI-powered financial analysis',
    },
  ],
  layout: 'vertical',
  submission: {
    onSubmit,
    submitText: 'Save AI Settings',
    loading: isLoading,
  },
  defaultValues: {
    provider: 'openai',
    api_key: '',
    base_url: '',
    model: 'gpt-3.5-turbo',
    max_tokens: 2048,
    temperature: 0.7,
    enable_function_calling: true,
    enable_vision: false,
    auto_categorization: true,
    receipt_scanning: true,
    invoice_generation: false,
    financial_insights: true,
    ...initialData,
  },
});